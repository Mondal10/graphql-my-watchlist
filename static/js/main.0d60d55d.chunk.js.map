{"version":3,"sources":["queries/queries.js","components/MovieDetails.js","components/MovieList.js","components/AddMovie.js","App.js","index.js"],"names":["getMoviesQuery","gql","getDirectorsQuery","addMovieMutation","getMovieQuery","MovieDetails","movie","this","props","data","Fragment","name","imgUrl","src","alt","genre","duration","rating","director","className","map","item","key","id","displayMovieDetails","Component","graphql","options","variables","movieId","MovieList","state","selected","loading","movies","onClick","e","setState","displayMovies","AddMovie","directorId","formRef","React","createRef","disabled","directors","value","preventDefault","refetchQueries","query","resetForm","current","reset","ref","onSubmit","submitForm","bind","placeholder","type","required","onChange","target","parseInt","min","max","step","parseFloat","displayDirectors","flowright","client","ApolloClient","uri","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0d60d55d.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\r\n\r\nconst getMoviesQuery = gql`\r\n  {\r\n    movies {\r\n        name\r\n        id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getDirectorsQuery = gql`\r\n  {\r\n    directors {\r\n        name\r\n        id\r\n    }\r\n  }\r\n`;\r\n\r\nconst addMovieMutation = gql`\r\n  mutation($name: String!, $genre: String!, $directorId: ID!, $imgUrl: String!, $duration: Int!, $rating: Float!){\r\n    addMovie(name:$name, genre:$genre, directorId:$directorId, imgUrl:$imgUrl, duration:$duration, rating:$rating){\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getMovieQuery = gql`\r\n  query($id:ID){\r\n    movie(id:$id){\r\n      id\r\n      name\r\n      genre\r\n      imgUrl\r\n      duration\r\n      rating\r\n      director {\r\n        id\r\n        name\r\n        age\r\n        movie {\r\n          name\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport { getMoviesQuery, getDirectorsQuery, addMovieMutation, getMovieQuery }","import React, { Component } from 'react';\r\nimport { graphql } from 'react-apollo';\r\n\r\nimport { getMovieQuery } from '../queries/queries'\r\n\r\nclass MovieDetails extends Component {\r\n\r\n  displayMovieDetails() {\r\n    const { movie } = this.props.data;\r\n\r\n    if (movie) {\r\n      return (\r\n        <React.Fragment>\r\n          <h2>{movie.name}</h2>\r\n          {\r\n            movie.imgUrl ? (\r\n              <img src={movie.imgUrl} alt={`${movie.name}`} />\r\n            ) : (\r\n                <small>No Image Found</small>\r\n              )\r\n          }\r\n          <p>Genre: {movie.genre}</p>\r\n          <p>Duration: {movie.duration} min</p>\r\n          <p>Rating: {movie.rating}</p>\r\n          <p>Director: {movie.director.name}</p>\r\n          <p>All movies by director:</p>\r\n          <ul className=\"other-movies\">\r\n            {\r\n              movie.director.movie.map(item => <li key={item.id}>{item.name}</li>)\r\n            }\r\n          </ul>\r\n        </React.Fragment>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <p>No Movies Found</p>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"movie-details\">\r\n        {this.displayMovieDetails()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default graphql(getMovieQuery, {\r\n  options: (props) => {\r\n    return {\r\n      variables: {\r\n        id: props.movieId\r\n      }\r\n    }\r\n  }\r\n})(MovieDetails);","import React, { Component } from 'react';\r\nimport { graphql } from 'react-apollo';\r\n\r\nimport { getMoviesQuery } from '../queries/queries'\r\n\r\n// Components\r\nimport MovieDetails from './MovieDetails'\r\n\r\nclass MovieList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selected: null\r\n    }\r\n  }\r\n\r\n  displayMovies() {\r\n    let data = this.props.data;\r\n\r\n    if (data.loading) {\r\n      return (<div>Loading Movie List...</div>);\r\n    } else {\r\n      return data.movies.map(movie => <li key={movie.id} onClick={(e) => { this.setState({ selected: movie.id }) }}>{movie.name}</li>);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ul id=\"movie-list\">\r\n          {this.displayMovies()}\r\n        </ul>\r\n        <MovieDetails movieId={this.state.selected} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default graphql(getMoviesQuery)(MovieList);","import React, { Component } from 'react';\r\nimport { graphql } from 'react-apollo';\r\nimport flowright from 'lodash.flowright';\r\n\r\nimport { getMoviesQuery, getDirectorsQuery, addMovieMutation } from '../queries/queries'\r\n\r\nclass AddMovie extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: '',\r\n      genre: '',\r\n      directorId: '',\r\n      imgUrl: '',\r\n      duration: 0,\r\n      rating: 0.0,\r\n    };\r\n    this.formRef = React.createRef();\r\n  }\r\n\r\n  displayDirectors() {\r\n    let data = this.props.getDirectorsQuery;\r\n\r\n    if (data.loading) {\r\n      return (<option disabled>Loading Directors...</option>);\r\n    } else {\r\n      return data.directors.map(director => <option key={director.id} value={director.id}>{director.name}</option>);\r\n    }\r\n  }\r\n\r\n  submitForm(e) {\r\n    e.preventDefault();\r\n    this.props.addMovieMutation({\r\n      variables: {\r\n        name: this.state.name,\r\n        genre: this.state.genre,\r\n        directorId: this.state.directorId,\r\n        imgUrl: this.state.imgUrl,\r\n        duration: this.state.duration,\r\n        rating: this.state.rating,\r\n      },\r\n      refetchQueries: [{ query: getMoviesQuery }]\r\n    });\r\n\r\n    this.resetForm();\r\n  }\r\n\r\n  resetForm() {\r\n    this.formRef.current.reset();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form id=\"add-movie\" ref={this.formRef} onSubmit={this.submitForm.bind(this)}>\r\n        <div className=\"field\">\r\n          <label>Movie name:</label>\r\n          <input placeholder=\"eg: Batman\" type=\"text\" required onChange={(e) => this.setState({ name: e.target.value })} />\r\n        </div>\r\n        <div className=\"field\">\r\n          <label>Cover Image:</label>\r\n          <input placeholder=\"eg: image-url.jpg\" type=\"url\" required onChange={(e) => this.setState({ imgUrl: e.target.value })} />\r\n        </div>\r\n        <div className=\"field\">\r\n          <label>Genre:</label>\r\n          <input placeholder=\"eg: Action\" type=\"text\" required onChange={(e) => this.setState({ genre: e.target.value })} />\r\n        </div>\r\n        <div className=\"field\">\r\n          <label>Duration:</label>\r\n          <input placeholder=\"eg: 152\" type=\"number\" required onChange={(e) => this.setState({ duration: parseInt(e.target.value) })} />\r\n        </div>\r\n        <div className=\"field\">\r\n          <label>Rating:</label>\r\n          <input placeholder=\"eg: 7.8\" type=\"number\" min=\"1\" max=\"10\" step=\"0.1\" required onChange={(e) => this.setState({ rating: parseFloat(e.target.value) })} />\r\n        </div>\r\n        <div className=\"field\">\r\n          <label>Director:</label>\r\n          <select required onChange={(e) => this.setState({ directorId: e.target.value })}>\r\n            <option value=\"\">Select director</option>\r\n            {this.displayDirectors()}\r\n          </select>\r\n        </div>\r\n        <button>+</button>\r\n\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default flowright(\r\n  graphql(getDirectorsQuery, { name: \"getDirectorsQuery\" }),\r\n  graphql(addMovieMutation, { name: \"addMovieMutation\" })\r\n)(AddMovie);","import React, { Component } from 'react';\r\nimport ApolloClient from 'apollo-boost';\r\nimport { ApolloProvider } from 'react-apollo';\r\n\r\n// components\r\nimport MovieList from './components/MovieList';\r\nimport AddMovie from './components/AddMovie'\r\n\r\n// apollo client setup\r\nconst client = new ApolloClient({\r\n  // uri: 'http://localhost:5000/graphql'\r\n  uri: 'https://graphql-watch-list.herokuapp.com/graphql'\r\n});\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <ApolloProvider client={client}>\r\n        <div id=\"main\">\r\n          <h1>Amit's Watch List</h1>\r\n          <MovieList />\r\n          <AddMovie />\r\n        </div>\r\n      </ApolloProvider>\r\n    );\r\n  }\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}